mutate(across(c(cbarq_aggression_1:cbarq_aggression_27), ~case_when(
. == "No aggression" ~ 0,
. == "Mild aggression" ~ 1,
. == "Moderate aggression" ~2,
. == "High aggression" ~3,
. == "Serious aggression" ~4
))) |>
mutate(across(c(cbarq_fear_1:cbarq_fear_18), ~case_when(
. == "No fear" ~ 0,
. == "Mild fear" ~ 1,
. == "Moderate fear" ~2,
. == "High fear" ~3,
. == "Extreme fear" ~4
))) |>
mutate(across(c(cbarq_separation_1:cbarq_separation_8), ~case_when(
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(across(c(cbarq_excitability_1:cbarq_excitability_6), ~case_when(
. == "No excitability" ~ 0,
. == "Mild excitability" ~ 1,
. == "Moderate excitability" ~2,
. == "High excitability" ~3,
. == "Extreme excitability" ~4
))) |>
mutate(across(c(cbarq_attachment_1:cbarq_attachment_6), ~case_when(
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(across(c(cbarq_miscellaneous_1:cbarq_miscellaneous_27), ~case_when(
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(sex = case_when(sex == "Female" ~1, sex == "Male" ~2),
desexed = case_when(desexed == "Yes" ~1, desexed == "No" ~2),
purebred = case_when(purebred == "Yes"~1, purebred == "No" ~2),
gaze_follow = case_when(gaze_follow == "Never" ~ 1,
gaze_follow == "Seldom" ~2,
gaze_follow == "Sometimes"~3,
gaze_follow == "Usually" ~4,
gaze_follow == "Always" ~5),
num_household_dogs = ifelse(is.na(num_household_dogs), 0, num_household_dogs)) |>  #add 0s to indicate when no other dogs were in the household
mutate(across(c(cbarq_train_1:cbarq_train_8,cbarq_aggression_1:cbarq_miscellaneous_27), as.numeric))  #change character columns to numeric columns so R understand how to use them
#Create a data frame that calculates composite scores for each subset of the scale and computes our three binary outcome variables
manydogs_feature_selection <- manydogs_data_transformed |>
mutate(training_score = rowMeans(select(manydogs_data_transformed,   #compute average scores of training
starts_with("cbarq_train_")), na.rm = TRUE),
aggression_score= rowMeans(select(manydogs_data_transformed,   #compute average scores of aggression
starts_with("cbarq_aggression_")), na.rm = TRUE),
fear_score= rowMeans(select(manydogs_data_transformed,    #compute average scores of fear
starts_with("cbarq_fear_")), na.rm = TRUE),
separation_score= rowMeans(select(manydogs_data_transformed,    ##compute average scores of separation issues
starts_with("cbarq_separation_")), na.rm = TRUE),
excitability_score = rowMeans(select(manydogs_data_transformed,    #compute average scores of excitability
starts_with("cbarq_excitability_")), na.rm = TRUE),
attachment_score= rowMeans(select(manydogs_data_transformed,     #compute average scores of attachment
starts_with("cbarq_attachment_")), na.rm = TRUE),
miscellaneous_score= rowMeans(select(manydogs_data_transformed,    #compute average scores of miscellaneous behavior issues
starts_with("cbarq_miscellaneous_")), na.rm = TRUE),
ostensive = rowMeans(select(manydogs_data_transformed,
starts_with("ostensive_")), na.rm = TRUE), #create proportion correct on ostensive task
ostensive_binary = ifelse(ostensive <= 0.5, 0, 1), #create column that notes if a dog performed over or under chance at the ostensive task
nonostensive = rowMeans(select(manydogs_data_transformed,
starts_with("nonostensive_")), na.rm = TRUE), #create proportion correct on nonostensive task
nonostensive_binary = ifelse(nonostensive <= 0.5, 0, 1),   #create column that notes if a dog performed over or under chance at the nonostensive task
os_best = ifelse(nonostensive > ostensive, 1, 0)) |>   #create column that notes if the dog was better at the nonostensive task
select(c(sex:purebred,gaze_follow,training_score:os_best))#grab the columns we will be using for the analysis in this tutorial
write.csv(manydogs_feature_selection, file = "manydogs_feature_selection.csv")
library(tidyverse)
library(knitr)
library(here)
manydogs_feature_selection <- read.csv("manydogs_feature_selection.csv")
library(tidyverse)
library(knitr)
library(here)
manydogs_feature_selection <- read.csv("manydogs_feature_selection.csv")
#create vector with how many NAs are in each column in the dataset
missing_frequency_in_manydogs_data <- colSums(is.na(manydogs_feature_selection))
#Create a barplot for the values frequency of missing values in the manydogs dataset
missing_values_barplot <- barplot(missing_frequency_in_manydogs_data,
main = "Number of Missing Values per Column",
ylab = "Number of Missing Values",
las = 2,
cex.names = .6)
manydogs_summary <- manydogs_feature_selection |>  #summarize continuous data
select(c(age,training_score:ostensive,nonostensive)) |>  #grab the 8 columns we needed
summary()  #Show me a summary of all the columns that I selected
manydogs_summary
# Grab just the continuous predictors
manydogs_missing <- manydogs_feature_selection |>
select(c(age,training_score:ostensive,nonostensive))
# Calculate the percentage of missing values for each column
missing_percent <- colMeans(is.na(manydogs_missing)) * 100
# Print the missing summary
missing_percent
# Subset the dataframe to include only the specified columns
subset_data <- manydogs_feature_selection |>
select("age", "training_score", "aggression_score", "fear_score",
"separation_score", "excitability_score", "attachment_score",
"miscellaneous_score", "ostensive", "nonostensive")
# Convert the data to long format, specifying the variable column
subset_data_long <- pivot_longer(subset_data, cols = everything(), names_to = "variable", values_to = "value", names_transform = list(variable = as.character))
# Create histograms using facet_wrap
ggplot(subset_data_long, aes(x = value)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free_x")
#create a function that finds the mode of a column
get_mode <- function(x) {
uniq_x <- unique(x)
uniq_x[which.max(tabulate(match(x, uniq_x)))]
}
#Selects the columns we are interested in and finds the mode
manydogs_feature_selection |>
select(sex, desexed, purebred, gaze_follow, ostensive_binary, nonostensive_binary, os_best) |>
summarise(across(everything(), get_mode))
#create a function that finds the mode of a column
get_mode <- function(x) {
uniq_x <- unique(x)
uniq_x[which.max(tabulate(match(x, uniq_x)))]
}
#Selects the columns we are interested in and finds the mode
manydogs_feature_selection |>
select(sex, desexed, purebred, gaze_follow, ostensive_binary, nonostensive_binary, os_best) |>
summarise(across(everything(), get_mode))
manydogs_transformed <- read.csv("manydogs_transformed.csv")
View(manydogs_transformed)
library(mlr)
library(tidyverse)
training_data <- read.csv("training_data.csv")
View(training_data)
manydogs_transformed <- read.csv("manydogs_transformed.csv")
View(manydogs_transformed)
library(tidyverse)
library(knitr)
library(here)
library(ggpubr)
library(car)
manydogs_missing_handled <- read.csv("manydogs_missing_handled.csv")
View(manydogs_missing_handled)
library(tidyverse)
library(knitr)
library(here)
manydogs_feature_selection <- read.csv("manydogs_feature_selection.csv")
View(manydogs_feature_selection)
library(tidyverse)
manydogs_data <- read.csv("manydogs_etal_2024_data.csv")
#The following code creates a new dataframe where all of the scales are changed from words to numbers so they can be used as discrete categorical data in the models we will create in this tutorial
manydogs_data_transformed <- manydogs_data |>
mutate(across(c(cbarq_train_1:cbarq_train_8), ~case_when(   #Change all scales from words to numbers
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(across(c(cbarq_aggression_1:cbarq_aggression_27), ~case_when(
. == "No aggression" ~ 0,
. == "Mild aggression" ~ 1,
. == "Moderate aggression" ~2,
. == "High aggression" ~3,
. == "Serious aggression" ~4
))) |>
mutate(across(c(cbarq_fear_1:cbarq_fear_18), ~case_when(
. == "No fear" ~ 0,
. == "Mild fear" ~ 1,
. == "Moderate fear" ~2,
. == "High fear" ~3,
. == "Extreme fear" ~4
))) |>
mutate(across(c(cbarq_separation_1:cbarq_separation_8), ~case_when(
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(across(c(cbarq_excitability_1:cbarq_excitability_6), ~case_when(
. == "No excitability" ~ 0,
. == "Mild excitability" ~ 1,
. == "Moderate excitability" ~2,
. == "High excitability" ~3,
. == "Extreme excitability" ~4
))) |>
mutate(across(c(cbarq_attachment_1:cbarq_attachment_6), ~case_when(
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(across(c(cbarq_miscellaneous_1:cbarq_miscellaneous_27), ~case_when(
. == "Never" ~0,
. == "Seldom" ~1,
. == "Sometimes" ~2,
. == "Usually" ~3,
. == "Always" ~4
))) |>
mutate(sex = case_when(sex == "Female" ~1, sex == "Male" ~2),
desexed = case_when(desexed == "Yes" ~1, desexed == "No" ~2),
purebred = case_when(purebred == "Yes"~1, purebred == "No" ~2),
gaze_follow = case_when(gaze_follow == "Never" ~ 1,
gaze_follow == "Seldom" ~2,
gaze_follow == "Sometimes"~3,
gaze_follow == "Usually" ~4,
gaze_follow == "Always" ~5),
num_household_dogs = ifelse(is.na(num_household_dogs), 0, num_household_dogs)) |>  #add 0s to indicate when no other dogs were in the household
mutate(across(c(cbarq_train_1:cbarq_train_8,cbarq_aggression_1:cbarq_miscellaneous_27), as.numeric))  #change character columns to numeric columns so R understand how to use them
#Create a data frame that calculates composite scores for each subset of the scale and computes our three binary outcome variables
manydogs_feature_selection <- manydogs_data_transformed |>
mutate(training_score = rowMeans(select(manydogs_data_transformed,   #compute average scores of training
starts_with("cbarq_train_")), na.rm = TRUE),
aggression_score= rowMeans(select(manydogs_data_transformed,   #compute average scores of aggression
starts_with("cbarq_aggression_")), na.rm = TRUE),
fear_score= rowMeans(select(manydogs_data_transformed,    #compute average scores of fear
starts_with("cbarq_fear_")), na.rm = TRUE),
separation_score= rowMeans(select(manydogs_data_transformed,    ##compute average scores of separation issues
starts_with("cbarq_separation_")), na.rm = TRUE),
excitability_score = rowMeans(select(manydogs_data_transformed,    #compute average scores of excitability
starts_with("cbarq_excitability_")), na.rm = TRUE),
attachment_score= rowMeans(select(manydogs_data_transformed,     #compute average scores of attachment
starts_with("cbarq_attachment_")), na.rm = TRUE),
miscellaneous_score= rowMeans(select(manydogs_data_transformed,    #compute average scores of miscellaneous behavior issues
starts_with("cbarq_miscellaneous_")), na.rm = TRUE),
ostensive = rowMeans(select(manydogs_data_transformed,
starts_with("ostensive_")), na.rm = TRUE), #create proportion correct on ostensive task
ostensive_binary = ifelse(ostensive <= 0.5, 0, 1), #create column that notes if a dog performed over or under chance at the ostensive task
nonostensive = rowMeans(select(manydogs_data_transformed,
starts_with("nonostensive_")), na.rm = TRUE), #create proportion correct on nonostensive task
nonostensive_binary = ifelse(nonostensive <= 0.5, 0, 1),   #create column that notes if a dog performed over or under chance at the nonostensive task
os_best = ifelse(nonostensive > ostensive, 1, 0)) |>   #create column that notes if the dog was better at the nonostensive task
select(c(sex:purebred,gaze_follow,training_score:os_best))#grab the columns we will be using for the analysis in this tutorial
write.csv(manydogs_feature_selection, file = "manydogs_feature_selection.csv")
library(tidyverse)
library(knitr)
library(here)
manydogs_feature_selection <- read.csv("manydogs_feature_selection.csv")
View(manydogs_feature_selection)
#create vector with how many NAs are in each column in the dataset
missing_frequency_in_manydogs_data <- colSums(is.na(manydogs_feature_selection))
#Create a barplot for the values frequency of missing values in the manydogs dataset
missing_values_barplot <- barplot(missing_frequency_in_manydogs_data,
main = "Number of Missing Values per Column",
ylab = "Number of Missing Values",
las = 2,
cex.names = .6)
manydogs_summary <- manydogs_feature_selection |>  #summarize continuous data
select(c(age,training_score:ostensive,nonostensive)) |>  #grab the 8 columns we needed
summary()  #Show me a summary of all the columns that I selected
manydogs_summary
# Grab just the continuous predictors
manydogs_missing <- manydogs_feature_selection |>
select(c(age,training_score:ostensive,nonostensive))
# Calculate the percentage of missing values for each column
missing_percent <- colMeans(is.na(manydogs_missing)) * 100
# Print the missing summary
missing_percent
# Subset the dataframe to include only the specified columns
subset_data <- manydogs_feature_selection |>
select("age", "training_score", "aggression_score", "fear_score",
"separation_score", "excitability_score", "attachment_score",
"miscellaneous_score", "ostensive", "nonostensive")
# Convert the data to long format, specifying the variable column
subset_data_long <- pivot_longer(subset_data, cols = everything(), names_to = "variable", values_to = "value", names_transform = list(variable = as.character))
# Create histograms using facet_wrap
ggplot(subset_data_long, aes(x = value)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free_x")
#create a data frame that replaces missing data with the column mean or median calculated above in summary tables
manydogs_missing_cont <- manydogs_feature_selection |>
mutate(age=replace_na(age, median(age, na.rm=TRUE)), #change NAs in the age column to the median of the age column
training_score=replace_na(training_score, mean(training_score, na.rm=TRUE)), #change NAs in the training column to the mean of the column
aggression_score=replace_na(aggression_score, median(aggression_score, na.rm=TRUE)),#change NAs in aggression column to median of the column
fear_score=replace_na(fear_score, median(fear_score, na.rm=TRUE)), #change NAs in fear column to median of the column
separation_score=replace_na(separation_score, median(separation_score, na.rm=TRUE)), #change NAs in separation column to the median of the column
excitability_score=replace_na(excitability_score, mean(excitability_score, na.rm=TRUE)), #change NAs in excitability column to mean of the column
attachment_score=replace_na(attachment_score, mean(attachment_score, na.rm=TRUE)),#change NAs in attachment column to mean of the column
miscellaneous_score=replace_na(miscellaneous_score, mean(miscellaneous_score, na.rm=TRUE)), #change NAs in miscellaneous column to mean of the column
ostensive=replace_na(ostensive, mean(ostensive, na.rm = TRUE)),
nonostensive=replace_na(nonostensive, mean(nonostensive, na.rm = TRUE)))
#create a function that finds the mode of a column
get_mode <- function(x) {
uniq_x <- unique(x)
uniq_x[which.max(tabulate(match(x, uniq_x)))]
}
#Selects the columns we are interested in and finds the mode
manydogs_feature_selection |>
select(sex, desexed, purebred, gaze_follow, ostensive_binary, nonostensive_binary, os_best) |>
summarise(across(everything(), get_mode))
write.csv(manydogs_missing_handled, file = "manydogs_missing_handled.csv")
missing_frequency_after_missing_handled <- colSums(is.na(manydogs_missing_handled)) #Add together any time that a column has an NA
missing_frequency_after_missing_handled
View(manydogs_missing_handled)
# add highest frequency per column to missing data in the data frame
manydogs_missing_handled <- manydogs_missing_cont |>
mutate(sex = ifelse(is.na(sex), 1, sex),  #change the NAs in the sex column to 1
desexed = ifelse(is.na(desexed), 1, desexed),
purebred = ifelse(is.na(purebred), 1, purebred),
gaze_follow = ifelse(is.na(gaze_follow), 3, gaze_follow),
ostensive_binary = ifelse(is.na(ostensive_binary), 0, ostensive_binary),
nonostensive_binary = ifelse(is.na(nonostensive_binary), 0, nonostensive_binary),
os_best = ifelse(is.na(os_best), 0, os_best))
write.csv(manydogs_missing_handled, file = "manydogs_missing_handled.csv")
missing_frequency_after_missing_handled <- colSums(is.na(manydogs_missing_handled)) #Add together any time that a column has an NA
missing_frequency_after_missing_handled
library(tidyverse)
library(knitr)
library(here)
library(ggpubr)
library(car)
manydogs_missing_handled <- read.csv("manydogs_missing_handled.csv")
manydogs_transformed <- manydogs_missing_handled %>%
mutate_at(vars(age, training_score, aggression_score, fear_score, separation_score, excitability_score, attachment_score, miscellaneous_score), scale)
write.csv(manydogs_transformed, file = "manydogs_transformed.csv")
manydogs_transformed <- read.csv("manydogs_transformed.csv")
set.seed(1234567) # ensures randomized outputs are reproducible
train_indices <- sample(1:nrow(manydogs_transformed), 0.8 * nrow(manydogs_transformed)) #Grabs a random subset of the data. In this case we asked for 80% of the data to be sampled which is the standard
training_data <- manydogs_transformed[train_indices, ] #Grab the 80% of the data you just pulled out and call it training
testing_data <- manydogs_transformed[-train_indices, ] # Grab the other 20% not in the train indices and call it testing
write.csv(training_data, file = "training_data.csv")
write.csv(testing_data, file = "testing_data.csv")
library(mlr)
library(tidyverse)
training_data <- read.csv("training_data.csv")
View(training_data)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but leave every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(sex, desexed, purebred, gaze_follow, os_best), as.factor)
View(training_data)
View(training_data)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but leave every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(sex, desexed, purebred, gaze_follow, os_best), as.factor)
exists("desexed")
colnames(training_data)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but leave every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(sex, desexed, purebred, gaze_follow, os_best), as.factor)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
library(mlr)
library(tidyverse)
training_data <- read.csv("training_data.csv")
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but leave every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(sex, desexed, purebred, gaze_follow, os_best), as.factor)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but leave every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(sex,desexed,purebred,gaze_follow,os_best), as.factor)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but leave every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(sex, training_data$desexed,purebred,gaze_follow,os_best), as.factor)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but grab every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(c(sex, desexed, purebred, gaze_follow, os_best), as.factor))
data_RQ_3_numeric <- data_RQ_3_factor |>
mutate(across(sex, desexed, purebred, gaze_follow), as.numeric)
#Research Question #1
#extract only the two columns from the large pre-processed training dataset we made in step 1 that are needed for the research question: training score and the ostensive binary outcome variable
data_RQ_1 <- training_data |>
select(training_score, ostensive_binary) |>
mutate(ostensive_binary = as.factor(ostensive_binary))
#Define the Task for RQ #1
task_RQ_1 <- makeClassifTask(data = data_RQ_1, target = "ostensive_binary")
#Research Question #2
#extract only the two columns from the large pre-processed dataset that are needed for the research question: training score and the nonostensive binary outcome variable
data_RQ_2 <- training_data |>
select(training_score, nonostensive_binary) |>
mutate(nonostensive_binary = as.factor(nonostensive_binary))
#Define the task for RQ #2
task_RQ_2 <- makeClassifTask(data = data_RQ_2, target = "nonostensive_binary")
#Research Question #3
#take out the two outcome variables that we don't want to use in this analysis but grab every other predictor
data_RQ_3_factor <- training_data |>
select(-c(ostensive_binary, nonostensive_binary)) |>
mutate(across(c(sex, desexed, purebred, gaze_follow, os_best), as.factor))
data_RQ_3_numeric <- data_RQ_3_factor |>
mutate(across(c(sex, desexed, purebred, gaze_follow), as.numeric))
#Define the task for RQ #3
task_RQ_3_factor <- makeClassifTask(data = data_RQ_3_factor, target = "os_best")
task_RQ_3_numeric <- makeClassifTask(data = data_RQ_3_numeric, target = "os_best")
install.packages("e1071")
library(e1071)
?replace-na
?replace_na
quarto render
quarto render
quarto render
View(testing_data)
